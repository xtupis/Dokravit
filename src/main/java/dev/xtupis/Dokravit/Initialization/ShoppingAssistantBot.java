package dev.xtupis.Dokravit.Initialization;

import dev.xtupis.Dokravit.parser.YandexMarketParser;
import dev.xtupis.Dokravit.token.TokenProvider;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

public class ShoppingAssistantBot extends TelegramLongPollingBot {

    private final TokenProvider tokenProvider = new TokenProvider();

    @Override
    public String getBotUsername() {
        return "–î–æ–∫—Ä–∞–≤–∏—Ç";
    }

    @Override
    public String getBotToken() {
        return tokenProvider.getToken();
    }

    private void sendMessageWithButtons(long chatId, String text, List<InlineKeyboardButton> buttons) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(new InlineKeyboardMarkup(List.of(buttons))); // –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private String extractUrlFromText(String text) {
        int index = text.indexOf("https://market.yandex.ru");
        if (index != -1) {
            int end = text.indexOf("\n", index);
            if (end == -1) end = text.length();
            return text.substring(index, end).trim();
        }
        return null;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            if (text.equals("/help")) {
                sendMessage(chatId,
                        """
                        üõí –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –î–æ–∫—Ä–∞–≤–∏—Ç. 
                        –ö–æ–≥–¥–∞-—Ç–æ —è –±—ã–ª –ø–µ—Ä–≤—ã–º –ø–æ—Å–ª–µ –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –î–µ—Ñ–æ—Ä—Å–∫–∏–π –ò–º–ø–µ—Ä–∏–∏, –Ω–æ –º–µ–Ω—è –ø–æ–Ω–∏–∑–∏–ª–∏!
                        –ú–æ—è —Å–∏–ª–∞ –Ω–µ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–∞, –Ω–æ –≤–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:
                     
                        ‚Ä¢ /search –Ω–æ—É—Ç–±—É–∫ ‚Äî –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–µ
                        ‚Ä¢ –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ¬ª –ø–æ–¥ —Ç–æ–≤–∞—Ä–æ–º
                        ‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏, –æ—Ç–∑—ã–≤—ã, —Ä–µ–π—Ç–∏–Ω–≥ –∏ —Ü–µ–Ω—É
                        """);
                return;
            }

            if (text.startsWith("/search")) {
                String query = text.replaceFirst("/search", "").trim();
                if (query.isEmpty()) {
                    sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏, —á—Ç–æ –∏—Å–∫–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: /search —Ç–µ–ª–µ–≤–∏–∑–æ—Ä");
                    return;
                }

                sendMessage(chatId, "üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: " + query + "...");

                List<String> results = YandexMarketParser.searchYandexMarket(query);

                if (results.isEmpty() || results.stream().allMatch(String::isBlank)) {
                    sendMessage(chatId, "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: " + query);
                } else {
                    for (String result : results) {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
                        String url = extractUrlFromText(result);
                        List<InlineKeyboardButton> buttons = new ArrayList<>();
                        if (url != null) {
                            buttons.add(InlineKeyboardButton.builder()
                                    .text("üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                                    .url(url)
                                    .build());
                        }
                        buttons.add(InlineKeyboardButton.builder()
                                .text("‚Ñπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
                                .callbackData("show_help")
                                .build());

                        sendMessageWithButtons(chatId, result, buttons);
                    }
                }
            }
        }

        if (update.hasCallbackQuery()) {
            CallbackQuery query = update.getCallbackQuery();
            if ("show_help".equals(query.getData())) {
                long chatId = query.getMessage().getChatId();
                sendMessage(chatId,
                        """
                        ‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
                        
                        1. –ò—Å–ø–æ–ª—å–∑—É–π /search <–∑–∞–ø—Ä–æ—Å>, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä.
                        2. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É.
                        3. –ü–æ–ª—É—á–∞–π –æ—Ç–∑—ã–≤—ã, —Ä–µ–π—Ç–∏–Ω–≥ –∏ —Ü–µ–Ω—É.
                        """);
            }
        }
    }


    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendLongMessage(long chatId, String fullText) {
        int maxLength = 4096;
        for (int start = 0; start < fullText.length(); start += maxLength) {
            int end = Math.min(start + maxLength, fullText.length());
            String part = fullText.substring(start, end);
            sendMessage(chatId, part);
        }
    }

}